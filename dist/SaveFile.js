"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
class SaveFile {
    constructor() {
        this.schemas = new Map();
        this.templates = new Map();
        this.elementManifests = new Map();
        this.basePage = null;
    }
    get dataPath() {
        return path.resolve(this.loadPath, 'data');
    }
    get savePath() {
        return this.loadPath;
    }
    readFrom(dirname) {
        return __awaiter(this, void 0, void 0, function* () {
            this.loadPath = dirname;
            let metaFile = yield fs.readFile(path.resolve(this.loadPath, 'metadata.json'), 'UTF-8');
            this.metadata = SaveFile.parseMetaData(JSON.parse(metaFile));
        });
    }
    static parseMetaData(obj) {
        let toReturn = { name: obj.name, version: obj.version };
        return toReturn;
    }
    static parseFields(obj) {
        let toReturn = [];
        obj.forEach((field) => {
            toReturn.push({ name: field.name, type: field.type.toLowerCase() });
        });
        return toReturn;
    }
    getMetadata() {
        return this.metadata;
    }
    static parsePageElements(obj) {
        let toReturn = [];
        obj.forEach((pageelem) => {
            let thisPageElem = {};
            thisPageElem.elementTag = pageelem.elementTag;
            thisPageElem.bindings = [];
            pageelem.bindings.forEach((binding) => {
                thisPageElem.bindings.push({ property: binding.property, value: binding.value });
            });
            toReturn.push(thisPageElem);
        });
        return toReturn;
    }
    getSchema(name) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.schemas.has(name)) {
                return this.schemas.get(name);
            }
            let schemaFile = yield fs.readFile(path.resolve(this.loadPath, 'schemas', name + '.json'), 'UTF-8');
            let fields = SaveFile.parseFields(JSON.parse(schemaFile));
            this.schemas.set(name, fields);
            return fields;
        });
    }
    getSchemaNames() {
        return __awaiter(this, void 0, void 0, function* () {
            let schemaDir = yield fs.readdir(path.resolve(this.loadPath, 'schemas'));
            let toReturn = [];
            for (let filename of schemaDir) {
                if (path.extname(filename) === '.json') {
                    let base = path.basename(filename, '.json');
                    toReturn.push(base);
                }
            }
            ;
            return toReturn;
        });
    }
    getTemplate(name) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.templates.has(name)) {
                return this.templates.get(name);
            }
            let templateFile = yield fs.readFile(path.resolve(this.loadPath, 'templates', name + '.json'), 'UTF-8');
            let pageElems = SaveFile.parsePageElements(JSON.parse(templateFile));
            this.templates.set(name, pageElems);
            return pageElems;
        });
    }
    static parseManifest(obj) {
        let toReturn = { elementTag: obj.elementTag, href: obj.href, importType: obj.importType.toLowerCase(), properties: obj.properties };
        for (let prop in toReturn.properties) {
            toReturn.properties[prop] = toReturn.properties[prop].toLowerCase();
        }
        return toReturn;
    }
    getElementManifests() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.elementManifests.size != 0) {
                return this.elementManifests;
            }
            let folderDir = path.resolve(this.loadPath, 'elements');
            let folders = yield fs.readdir(folderDir);
            for (let folder of folders) {
                let thisPath = path.resolve(folderDir, folder);
                let stat = yield fs.stat(thisPath);
                if (!stat.isDirectory()) {
                    continue;
                }
                let fileHref = path.resolve(thisPath, 'kangratmanifest.json');
                if (yield fs.exists(fileHref)) {
                    let file = yield fs.readFile(fileHref, 'UTF-8');
                    let manifest = SaveFile.parseManifest(JSON.parse(file));
                    manifest.href = path.relative(this.loadPath, path.resolve(thisPath, manifest.href)).replace(new RegExp('\\' + path.sep, 'g'), '/');
                    this.elementManifests.set(manifest.elementTag, manifest);
                }
            }
            return this.elementManifests;
        });
    }
    getBasePage() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.basePage != null) {
                return this.basePage;
            }
            let testPath = path.resolve(this.loadPath, 'BasePage.html');
            if (yield fs.exists(testPath)) {
                this.basePage = yield fs.readFile(path.resolve(this.loadPath, 'BasePage.html'), 'UTF-8');
            }
            else {
                this.basePage = yield fs.readFile(path.resolve(__dirname, '../BasePage.html'), 'UTF-8');
            }
            return this.basePage;
        });
    }
}
exports.SaveFile = SaveFile;
//# sourceMappingURL=data:application/json;base64,