"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FileTypes_1 = require("./FileTypes");
class KangratTypeMismatch extends Error {
    constructor(message) {
        super(message);
        this.name = 'KangratTypeMismatch';
    }
    static create(from, to, schema, field, element, property) {
        return new KangratTypeMismatch(`Type mismatch: tried to put a ${from} type value in a ${to} type property
            @ from value: ${schema}.${field}
            to property: ${element}.${property}`);
    }
}
exports.KangratTypeMismatch = KangratTypeMismatch;
class KangratElementNotFound extends Error {
    constructor(message) {
        super(message);
        this.name = 'KangratElementNotFound';
    }
    static create(element, template) {
        return new KangratElementNotFound(`Element not found: Element type ${element} is neither built in nor registered with a Kangratmanifest.json
            @ template ${template}`);
    }
}
exports.KangratElementNotFound = KangratElementNotFound;
class KangratPropertyNotFound extends Error {
    constructor(message) {
        super(message);
        this.name = 'KangratPropertyNotFound';
    }
    static create(element, property, template) {
        return new KangratPropertyNotFound(`Property not found: Element type: ${element} does not have property: ${property}
            @ template: ${template}`);
    }
}
exports.KangratPropertyNotFound = KangratPropertyNotFound;
class KangratValueNotFound extends Error {
    constructor(message) {
        super(message);
        this.name = 'KangratValueNotFound';
    }
    static create(schema, value, template) {
        return new KangratValueNotFound(`Value not found: schema type: ${schema} does not have value: ${value}
            @ template: ${template}`);
    }
}
exports.KangratValueNotFound = KangratValueNotFound;
class KangratTypeNotRecognized extends Error {
    constructor(message) {
        super(message);
        this.name = 'KangratTypeNotRecognized';
    }
    static create(type, schema, value, template) {
        return new KangratTypeNotRecognized(`Type not recognized: schema type: ${schema} has an unrecognized field type: ${type}
            @ value: ${value} in template: ${template}
            should be one of ${FileTypes_1.recognizedTypes}, or if it is an array it should be one of those types surrounded with [ and ]`);
    }
}
exports.KangratTypeNotRecognized = KangratTypeNotRecognized;
class KangratIndexTypeError extends Error {
    constructor(message) {
        super(message);
        this.name = 'KangratIndexTypeError';
    }
    static create(schema, value, type) {
        return new KangratIndexTypeError(`Index cannot be generated from value: schema ${schema} has impossible type: ${type}
            @ value name: ${value}
            should be one of [Number, Date]`);
    }
}
exports.KangratIndexTypeError = KangratIndexTypeError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXJyb3JUeXBlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL0Vycm9yVHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBNEM7QUFDNUMseUJBQWlDLFNBQVEsS0FBSztJQUMxQyxZQUFhLE9BQWU7UUFDeEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxxQkFBcUIsQ0FBQztJQUN0QyxDQUFDO0lBQ00sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFZLEVBQUUsRUFBVSxFQUFFLE1BQWMsRUFBRSxLQUFhLEVBQUUsT0FBZSxFQUFFLFFBQWdCO1FBQzNHLE1BQU0sQ0FBQyxJQUFJLG1CQUFtQixDQUMxQixpQ0FBaUMsSUFBSSxvQkFBb0IsRUFBRTs0QkFDM0MsTUFBTSxJQUFJLEtBQUs7MkJBQ2hCLE9BQU8sSUFBSSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FDSjtBQVhELGtEQVdDO0FBQ0QsNEJBQW9DLFNBQVEsS0FBSztJQUM3QyxZQUFhLE9BQWU7UUFDeEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyx3QkFBd0IsQ0FBQztJQUN6QyxDQUFDO0lBQ00sTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFlLEVBQUUsUUFBZ0I7UUFDbEQsTUFBTSxDQUFDLElBQUksc0JBQXNCLENBQzdCLG1DQUFtQyxPQUFPO3lCQUM3QixRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Q0FDSjtBQVZELHdEQVVDO0FBQ0QsNkJBQXFDLFNBQVEsS0FBSztJQUM5QyxZQUFhLE9BQWU7UUFDeEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyx5QkFBeUIsQ0FBQztJQUMxQyxDQUFDO0lBQ00sTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFlLEVBQUUsUUFBZ0IsRUFBRSxRQUFnQjtRQUNwRSxNQUFNLENBQUMsSUFBSSx1QkFBdUIsQ0FDOUIscUNBQXFDLE9BQU8sNEJBQTRCLFFBQVE7MEJBQ2xFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDbEMsQ0FBQztDQUNKO0FBVkQsMERBVUM7QUFDRCwwQkFBa0MsU0FBUSxLQUFLO0lBQzNDLFlBQWEsT0FBZTtRQUN4QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLHNCQUFzQixDQUFDO0lBQ3ZDLENBQUM7SUFDTSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQWMsRUFBRSxLQUFhLEVBQUUsUUFBZ0I7UUFDaEUsTUFBTSxDQUFDLElBQUksb0JBQW9CLENBQzNCLGlDQUFpQyxNQUFNLHlCQUF5QixLQUFLOzBCQUN2RCxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDSjtBQVZELG9EQVVDO0FBQ0QsOEJBQXNDLFNBQVEsS0FBSztJQUMvQyxZQUFhLE9BQWU7UUFDeEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRywwQkFBMEIsQ0FBQztJQUMzQyxDQUFDO0lBQ00sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFZLEVBQUUsTUFBYyxFQUFFLEtBQWEsRUFBRSxRQUFnQjtRQUM5RSxNQUFNLENBQUMsSUFBSSx3QkFBd0IsQ0FDL0IscUNBQXFDLE1BQU0sb0NBQW9DLElBQUk7dUJBQ3hFLEtBQUssaUJBQWlCLFFBQVE7K0JBQ3RCLDJCQUFlLGdGQUFnRixDQUFDLENBQUM7SUFDNUgsQ0FBQztDQUNKO0FBWEQsNERBV0M7QUFDRCwyQkFBbUMsU0FBUSxLQUFLO0lBQzVDLFlBQWEsT0FBZTtRQUN4QixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsSUFBSSxHQUFHLHVCQUF1QixDQUFDO0lBQ3hDLENBQUM7SUFDTSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQWMsRUFBRSxLQUFhLEVBQUUsSUFBWTtRQUM1RCxNQUFNLENBQUMsSUFBSSxxQkFBcUIsQ0FDNUIsZ0RBQWdELE1BQU0seUJBQXlCLElBQUk7NEJBQ25FLEtBQUs7NENBQ1csQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FDSjtBQVhELHNEQVdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtyZWNvZ25pemVkVHlwZXN9IGZyb20gJy4vRmlsZVR5cGVzJztcclxuZXhwb3J0IGNsYXNzIEthbmdyYXRUeXBlTWlzbWF0Y2ggZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvciAobWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gJ0thbmdyYXRUeXBlTWlzbWF0Y2gnO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nLCBzY2hlbWE6IHN0cmluZywgZmllbGQ6IHN0cmluZywgZWxlbWVudDogc3RyaW5nLCBwcm9wZXJ0eTogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBLYW5ncmF0VHlwZU1pc21hdGNoKFxyXG4gICAgICAgICAgICBgVHlwZSBtaXNtYXRjaDogdHJpZWQgdG8gcHV0IGEgJHtmcm9tfSB0eXBlIHZhbHVlIGluIGEgJHt0b30gdHlwZSBwcm9wZXJ0eVxyXG4gICAgICAgICAgICBAIGZyb20gdmFsdWU6ICR7c2NoZW1hfS4ke2ZpZWxkfVxyXG4gICAgICAgICAgICB0byBwcm9wZXJ0eTogJHtlbGVtZW50fS4ke3Byb3BlcnR5fWApO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBLYW5ncmF0RWxlbWVudE5vdEZvdW5kIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IgKG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9ICdLYW5ncmF0RWxlbWVudE5vdEZvdW5kJztcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKGVsZW1lbnQ6IHN0cmluZywgdGVtcGxhdGU6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiBuZXcgS2FuZ3JhdEVsZW1lbnROb3RGb3VuZChcclxuICAgICAgICAgICAgYEVsZW1lbnQgbm90IGZvdW5kOiBFbGVtZW50IHR5cGUgJHtlbGVtZW50fSBpcyBuZWl0aGVyIGJ1aWx0IGluIG5vciByZWdpc3RlcmVkIHdpdGggYSBLYW5ncmF0bWFuaWZlc3QuanNvblxyXG4gICAgICAgICAgICBAIHRlbXBsYXRlICR7dGVtcGxhdGV9YCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIEthbmdyYXRQcm9wZXJ0eU5vdEZvdW5kIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IgKG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9ICdLYW5ncmF0UHJvcGVydHlOb3RGb3VuZCc7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZShlbGVtZW50OiBzdHJpbmcsIHByb3BlcnR5OiBzdHJpbmcsIHRlbXBsYXRlOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEthbmdyYXRQcm9wZXJ0eU5vdEZvdW5kKFxyXG4gICAgICAgICAgICBgUHJvcGVydHkgbm90IGZvdW5kOiBFbGVtZW50IHR5cGU6ICR7ZWxlbWVudH0gZG9lcyBub3QgaGF2ZSBwcm9wZXJ0eTogJHtwcm9wZXJ0eX1cclxuICAgICAgICAgICAgQCB0ZW1wbGF0ZTogJHt0ZW1wbGF0ZX1gKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgS2FuZ3JhdFZhbHVlTm90Rm91bmQgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvciAobWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gJ0thbmdyYXRWYWx1ZU5vdEZvdW5kJztcclxuICAgIH1cclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlKHNjaGVtYTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCB0ZW1wbGF0ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBLYW5ncmF0VmFsdWVOb3RGb3VuZChcclxuICAgICAgICAgICAgYFZhbHVlIG5vdCBmb3VuZDogc2NoZW1hIHR5cGU6ICR7c2NoZW1hfSBkb2VzIG5vdCBoYXZlIHZhbHVlOiAke3ZhbHVlfVxyXG4gICAgICAgICAgICBAIHRlbXBsYXRlOiAke3RlbXBsYXRlfWApO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBLYW5ncmF0VHlwZU5vdFJlY29nbml6ZWQgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvciAobWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gJ0thbmdyYXRUeXBlTm90UmVjb2duaXplZCc7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZSh0eXBlOiBzdHJpbmcsIHNjaGVtYTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nLCB0ZW1wbGF0ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBLYW5ncmF0VHlwZU5vdFJlY29nbml6ZWQoXHJcbiAgICAgICAgICAgIGBUeXBlIG5vdCByZWNvZ25pemVkOiBzY2hlbWEgdHlwZTogJHtzY2hlbWF9IGhhcyBhbiB1bnJlY29nbml6ZWQgZmllbGQgdHlwZTogJHt0eXBlfVxyXG4gICAgICAgICAgICBAIHZhbHVlOiAke3ZhbHVlfSBpbiB0ZW1wbGF0ZTogJHt0ZW1wbGF0ZX1cclxuICAgICAgICAgICAgc2hvdWxkIGJlIG9uZSBvZiAke3JlY29nbml6ZWRUeXBlc30sIG9yIGlmIGl0IGlzIGFuIGFycmF5IGl0IHNob3VsZCBiZSBvbmUgb2YgdGhvc2UgdHlwZXMgc3Vycm91bmRlZCB3aXRoIFsgYW5kIF1gKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgS2FuZ3JhdEluZGV4VHlwZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IgKG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9ICdLYW5ncmF0SW5kZXhUeXBlRXJyb3InO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoc2NoZW1hOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIHR5cGU6IHN0cmluZykge1xyXG4gICAgICAgIHJldHVybiBuZXcgS2FuZ3JhdEluZGV4VHlwZUVycm9yKFxyXG4gICAgICAgICAgICBgSW5kZXggY2Fubm90IGJlIGdlbmVyYXRlZCBmcm9tIHZhbHVlOiBzY2hlbWEgJHtzY2hlbWF9IGhhcyBpbXBvc3NpYmxlIHR5cGU6ICR7dHlwZX1cclxuICAgICAgICAgICAgQCB2YWx1ZSBuYW1lOiAke3ZhbHVlfVxyXG4gICAgICAgICAgICBzaG91bGQgYmUgb25lIG9mIFtOdW1iZXIsIERhdGVdYCk7XHJcbiAgICB9XHJcbn0iXX0=