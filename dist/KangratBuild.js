"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs-promise");
const SafetyCheck_1 = require("./SafetyCheck");
const colors = require('colors');
const KANGRAT_ROOT = '<!--KANGRAT_ROOT-->';
const KANGRAT_BINDINGS = '[/*KANGRAT_BINDINGS*/]';
const KANGRAT_IMPORT = '<!--KANGRAT_IMPORT-->';
class KangratBuild {
    constructor(save, outputDir) {
        this.save = save;
        this.outputDir = outputDir;
    }
    buildAll(validate) {
        return __awaiter(this, void 0, void 0, function* () {
            let startTime = Date.now();
            console.log(`Building site: ${this.save.getMetadata().name} (v${this.save.getMetadata().version})\noutput: ${this.outputDir}`.red);
            yield fs.ensureDir(this.outputDir);
            if (validate) {
                console.log('Running static checks on site'.red);
                yield new SafetyCheck_1.SafetyCheck(this.save).checkAll();
                console.log('Everything checks out! (you deserve a pat on the back)'.green);
            }
            let buildPromises = [];
            for (let schemaName of yield this.save.getSchemaNames()) {
                buildPromises.push(this.buildTemplate(schemaName));
            }
            yield Promise.all(buildPromises);
            console.log('copying dependencies'.cyan);
            yield this.copyDependencies();
            console.log('dependencies copied'.green);
            console.log('copying data'.cyan);
            yield this.copyData();
            console.log('data copied'.green);
            console.log(`Build complete in ${(Date.now() - startTime) / 1000} seconds`.red);
        });
    }
    buildTemplate(schemaName) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(`building template: ${schemaName}`.cyan);
            let schema = yield this.save.getSchema(schemaName);
            let elements = yield this.save.getElementManifests();
            let template = yield this.save.getTemplate(schemaName);
            let pageElements = '';
            let bindings = [];
            let neededImports = '';
            let currentId = 0;
            for (let pgElement of template) {
                let builtIn = pgElement.elementTag.indexOf('-') == -1;
                for (let bind of pgElement.bindings) {
                    bindings.push({ value: bind.value, property: bind.property, elemId: 'kangrat' + currentId });
                }
                pageElements += `<div class="kangratelement"><${pgElement.elementTag} id="${'kangrat' + (currentId++)}" /></div>\n`;
                if (!builtIn) {
                    let element = elements.get(pgElement.elementTag);
                    if (element.importType == 'script') {
                        neededImports += `<script src="${element.href}"></script>\n`;
                    }
                    else if (element.importType == 'html') {
                        neededImports += `<link rel="import" href="${element.href}">\n`;
                    }
                }
            }
            console.log(`writing ${schemaName}.html`.green);
            yield this.writePage(schemaName, pageElements, bindings, neededImports);
        });
    }
    writePage(schema, pageElements, bindings, neededImports) {
        return __awaiter(this, void 0, void 0, function* () {
            let originalText = yield this.save.getBasePage();
            originalText = originalText.replace(KANGRAT_ROOT, pageElements).replace(KANGRAT_BINDINGS, JSON.stringify(bindings)).replace(KANGRAT_IMPORT, neededImports);
            yield fs.ensureFile(path.resolve(this.outputDir, schema + '.html'));
            yield fs.writeFile(path.resolve(this.outputDir, schema + '.html'), originalText, 'UTF-8');
        });
    }
    copyDependencies() {
        return __awaiter(this, void 0, void 0, function* () {
            yield fs.copy(path.resolve(this.save.savePath, 'elements'), path.resolve(this.outputDir, 'elements'));
        });
    }
    copyData() {
        return __awaiter(this, void 0, void 0, function* () {
            yield fs.copy(this.save.dataPath, path.resolve(this.outputDir, 'data'));
        });
    }
}
exports.KangratBuild = KangratBuild;
function getFieldType(schema, name) {
    for (let field of schema) {
        if (field.name == name) {
            return field.type;
        }
    }
    return null;
}
function getPropertyType(element, name) {
    if (element.properties[name] != undefined) {
        return element.properties[name];
    }
    return null;
}
//# sourceMappingURL=data:application/json;base64,